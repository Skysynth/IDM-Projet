-- @path la=/fr.l127.librairieAlgorithme/model/generated/LA.ecore
-- @path schemaTable=/fr.l127.schemaTable/model/schemaTable.ecore
-- @path schemaTableAlgo=/fr.l127.schemaTableAlgo/model/schemaTableAlgo.ecore

module laschemaTable2schemaTableAlgo;
create OUT : schemaTableAlgo from IN : la, IN1 : schemaTable;

rule schemaTable2schemaTable{
	from schemaTable : schemaTable!SchemaTable
	to schemaTableAlgo : schemaTableAlgo!SchemaTableAlgo(
		table<-schemaTable.table)
	do {
		schemaTableAlgo.catalogue <- schemaTableAlgo!Catalogue.allInstances();
		
	}
	
}

rule table2table{
	from tableIn : schemaTable!Table
	to table : schemaTableAlgo!Table(
		id<-tableIn.id,
		colonne<-tableIn.colonne
		)
}
rule colonneSpe2colonneSpe{
	from colonneIn : schemaTable!ColonneSpeciale
	to colonne : schemaTableAlgo!ColonneSpeciale(
		id<-colonneIn.id,
		typeColonne<-colonneIn.typeColonne,
		contrainte<-colonneIn.contrainte
		)
}

rule contrainte2contrainte{
	from contrainteIn : schemaTable!Contrainte
	to contrainte : schemaTableAlgo!Contrainte (
		nom<-contrainteIn.nom,
		args <-contrainteIn.args
	)
}
rule colonneNormal2colonneNormal{
	from colonneIn : schemaTable!ColonneNormal
	to colonne : schemaTableAlgo!ColonneNormal(
		id<-colonneIn.id,
		typeColonne<-colonneIn.typeColonne,
		contrainte<-colonneIn.contrainte
		)
}

rule librairie2algorithme {
	from librairie : la!Librairie
	to catalogue : schemaTableAlgo!Catalogue(
						nom <-librairie.name,
						algorithme <-librairie.elements
						)
}
rule Algorithme2Algorithme {
    from
        algoLA : la!Algorithme
    to
        algorithme : schemaTableAlgo!Algorithme
    (
        chemin <- algoLA.chemin,
        entrees <- algoLA.entrees->collect(entreeLA | entreeLA.idColonne ),
		sorties <- algoLA.sorties->collect(sortiesLA | sortiesLA.idColonne )	
	)

}
