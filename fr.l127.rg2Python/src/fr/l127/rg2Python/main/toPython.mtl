[comment encoding = UTF-8 /]
[module toPython('http://www.example.org/ressourceGraphique')]

[template public generateElement(aRessourceGraphique : RessourceGraphique)]
[comment @main/] 
[file (aRessourceGraphique.nom +'.py', false, 'UTF-8')]
from fonctions import *
def [aRessourceGraphique.nom/] (*colonnes) :
	return ['['/][let resultats : OrderedSet(Resultat) = sortedResultat(aRessourceGraphique.getResultats())][for (i : Integer | Sequence{1..resultats->size()})][let res : Resultat = resultats->at(i)][generateFunctionCallResultat(res)/][if (i <> resultats->size())],[/if][/let][/for][/let]]
[/file]
[/template]


[template public generateFunctionCallResultat(bloc: Resultat)][if (bloc.entree->notEmpty())][let entrees : OrderedSet(Bloc) = bloc.getEntrees()][for (entree : Bloc | entrees )][generateFunctionCallBloc(entree)/][/for][/let][/if]
[/template]

[template public generateFunctionCallBloc (bloc: Bloc)][if (bloc.oclIsKindOf(BlocBinaire))][let blocBinaire : BlocBinaire = bloc.oclAsType(BlocBinaire)][generateCallBlocBinaire(blocBinaire)/][/let][else][if (bloc.oclIsKindOf(BlocUnaire))][let blocUnaire : BlocUnaire = bloc.oclAsType(BlocUnaire)][generateCallBlocUnaire(blocUnaire)/][/let][else][if (bloc.oclIsTypeOf(Constante))][let cons : Constante = bloc.oclAsType(Constante)][generateCallBlocConstante(cons)/][/let][else][if (bloc.oclIsTypeOf(RefColonne))][let refColonne : RefColonne = bloc.oclAsType(RefColonne)][generateCallBlocrefColonne(refColonne)/][/let][else][/if][/if][/if][/if]
[/template]
[template public generateCallBlocBinaire(bloc: BlocBinaire)][if (bloc.entree->notEmpty())][nameMethodPython(bloc)/]([let entrees : OrderedSet(Bloc) = bloc.getEntrees()][for (i : Integer | Sequence{1..entrees->size()})][let entree : Bloc = entrees->at(i)][generateFunctionCallBloc(entree)/][if (i <> entrees->size())],[else])[/if][/let][/for][/let][/if]
[/template]
[template public generateCallBlocUnaire(bloc: BlocUnaire)][if (bloc.entree->notEmpty())][nameMethodPython(bloc)/]([generateFunctionCallBloc(bloc.entree)/])[/if]
[/template]
[template public generateCallBlocConstante(bloc: Constante)]cons([bloc.valeur/])
[/template]
[template public generateCallBlocrefColonne(bloc: RefColonne)]colonnes['['/][bloc.idColonne/][']'/]
[/template]

[query public getResultats(rg : RessourceGraphique) : OrderedSet(Resultat) =
    rg.bloc->select(e | e.oclIsTypeOf(Resultat))->asOrderedSet()
/]
[query public sortedResultat(resultats : OrderedSet(Resultat)) : OrderedSet(Resultat) =
    resultats->sortedBy(r | r.idColonne)
/]

[query public getEntrees(bloc : BlocBinaire) : OrderedSet(Bloc) = 
      bloc.entree->asOrderedSet()
/]
[query public getEntrees(bloc : BlocUnaire) : OrderedSet(Bloc) = 
      bloc.entree->asOrderedSet()
/]
[query public getEntrees(bloc : Resultat) : OrderedSet(Bloc) = 
      bloc.entree->asOrderedSet()
/]

[template public nameMethodPython(bloc: BlocUnaire)][if (bloc.oclIsTypeOf(Inverse))]reverse[else][if (bloc.oclIsTypeOf(Negation))]opposite[else][if (bloc.oclIsTypeOf(RacineCarree))]sqrt[else][if (bloc.oclIsTypeOf(Sinus))]sin[else][if (bloc.oclIsTypeOf(Cosinus))]cos[else][if (bloc.oclIsTypeOf(FichierUnaire))][let fichierUnaire : FichierUnaire = bloc.oclAsType(FichierUnaire)][fichierUnaire.chemin/][/let][/if][/if][/if][/if][/if][/if]
[/template]
[template public nameMethodPython(bloc: BlocBinaire)][if (bloc.oclIsTypeOf(Maximun))]max[else][if (bloc.oclIsTypeOf(Minimun))]min[else][if (bloc.oclIsTypeOf(Soustraction))]subtract[else][if (bloc.oclIsTypeOf(Division))]divide[else][if (bloc.oclIsTypeOf(Addition))]add[else][if (bloc.oclIsTypeOf(Multiplication))]multiply[else][if (bloc.oclIsTypeOf(FichierBinaire))][let fichierBinaire : FichierBinaire = bloc.oclAsType(FichierBinaire)][fichierBinaire.chemin/][/let][/if][/if][/if][/if][/if][/if][/if]
[/template]







