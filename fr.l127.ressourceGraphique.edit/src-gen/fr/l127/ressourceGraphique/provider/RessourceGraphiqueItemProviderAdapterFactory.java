/**
 */
package fr.l127.ressourceGraphique.provider;

import fr.l127.ressourceGraphique.util.RessourceGraphiqueAdapterFactory;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class RessourceGraphiqueItemProviderAdapterFactory extends RessourceGraphiqueAdapterFactory
		implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public RessourceGraphiqueItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link fr.l127.ressourceGraphique.RessourceGraphique} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RessourceGraphiqueItemProvider ressourceGraphiqueItemProvider;

	/**
	 * This creates an adapter for a {@link fr.l127.ressourceGraphique.RessourceGraphique}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRessourceGraphiqueAdapter() {
		if (ressourceGraphiqueItemProvider == null) {
			ressourceGraphiqueItemProvider = new RessourceGraphiqueItemProvider(this);
		}

		return ressourceGraphiqueItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link fr.l127.ressourceGraphique.Bloc} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BlocItemProvider blocItemProvider;

	/**
	 * This creates an adapter for a {@link fr.l127.ressourceGraphique.Bloc}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBlocAdapter() {
		if (blocItemProvider == null) {
			blocItemProvider = new BlocItemProvider(this);
		}

		return blocItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link fr.l127.ressourceGraphique.FichierBinaire} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FichierBinaireItemProvider fichierBinaireItemProvider;

	/**
	 * This creates an adapter for a {@link fr.l127.ressourceGraphique.FichierBinaire}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFichierBinaireAdapter() {
		if (fichierBinaireItemProvider == null) {
			fichierBinaireItemProvider = new FichierBinaireItemProvider(this);
		}

		return fichierBinaireItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link fr.l127.ressourceGraphique.Constante} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ConstanteItemProvider constanteItemProvider;

	/**
	 * This creates an adapter for a {@link fr.l127.ressourceGraphique.Constante}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createConstanteAdapter() {
		if (constanteItemProvider == null) {
			constanteItemProvider = new ConstanteItemProvider(this);
		}

		return constanteItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link fr.l127.ressourceGraphique.RefColonne} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RefColonneItemProvider refColonneItemProvider;

	/**
	 * This creates an adapter for a {@link fr.l127.ressourceGraphique.RefColonne}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRefColonneAdapter() {
		if (refColonneItemProvider == null) {
			refColonneItemProvider = new RefColonneItemProvider(this);
		}

		return refColonneItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link fr.l127.ressourceGraphique.Negation} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected NegationItemProvider negationItemProvider;

	/**
	 * This creates an adapter for a {@link fr.l127.ressourceGraphique.Negation}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createNegationAdapter() {
		if (negationItemProvider == null) {
			negationItemProvider = new NegationItemProvider(this);
		}

		return negationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link fr.l127.ressourceGraphique.Sinus} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SinusItemProvider sinusItemProvider;

	/**
	 * This creates an adapter for a {@link fr.l127.ressourceGraphique.Sinus}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSinusAdapter() {
		if (sinusItemProvider == null) {
			sinusItemProvider = new SinusItemProvider(this);
		}

		return sinusItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link fr.l127.ressourceGraphique.Addition} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AdditionItemProvider additionItemProvider;

	/**
	 * This creates an adapter for a {@link fr.l127.ressourceGraphique.Addition}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAdditionAdapter() {
		if (additionItemProvider == null) {
			additionItemProvider = new AdditionItemProvider(this);
		}

		return additionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link fr.l127.ressourceGraphique.Multiplication} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MultiplicationItemProvider multiplicationItemProvider;

	/**
	 * This creates an adapter for a {@link fr.l127.ressourceGraphique.Multiplication}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMultiplicationAdapter() {
		if (multiplicationItemProvider == null) {
			multiplicationItemProvider = new MultiplicationItemProvider(this);
		}

		return multiplicationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link fr.l127.ressourceGraphique.FichierUnaire} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FichierUnaireItemProvider fichierUnaireItemProvider;

	/**
	 * This creates an adapter for a {@link fr.l127.ressourceGraphique.FichierUnaire}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFichierUnaireAdapter() {
		if (fichierUnaireItemProvider == null) {
			fichierUnaireItemProvider = new FichierUnaireItemProvider(this);
		}

		return fichierUnaireItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link fr.l127.ressourceGraphique.Resultat} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ResultatItemProvider resultatItemProvider;

	/**
	 * This creates an adapter for a {@link fr.l127.ressourceGraphique.Resultat}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createResultatAdapter() {
		if (resultatItemProvider == null) {
			resultatItemProvider = new ResultatItemProvider(this);
		}

		return resultatItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>) type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (ressourceGraphiqueItemProvider != null)
			ressourceGraphiqueItemProvider.dispose();
		if (blocItemProvider != null)
			blocItemProvider.dispose();
		if (fichierBinaireItemProvider != null)
			fichierBinaireItemProvider.dispose();
		if (constanteItemProvider != null)
			constanteItemProvider.dispose();
		if (refColonneItemProvider != null)
			refColonneItemProvider.dispose();
		if (negationItemProvider != null)
			negationItemProvider.dispose();
		if (sinusItemProvider != null)
			sinusItemProvider.dispose();
		if (additionItemProvider != null)
			additionItemProvider.dispose();
		if (multiplicationItemProvider != null)
			multiplicationItemProvider.dispose();
		if (fichierUnaireItemProvider != null)
			fichierUnaireItemProvider.dispose();
		if (resultatItemProvider != null)
			resultatItemProvider.dispose();
	}

}
